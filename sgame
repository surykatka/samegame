program SameGame;
type Planszeczka = Array[1..20, 1..26]  of Char;
	 ZnakiGracza = Set of Char;
	 Droga = Array[1..520, 1..2] of Integer;
const ac : Integer = 97; 
var ile : Integer = 0;
	sciezka : Droga;

function generujLiczbePseudolosowa(var x : Longint) : Longint;
const
    M = MAXLONGINT;
    A = 7 * 7 * 7 * 7 * 7;
    Q = M div A;
    R = M mod A;
begin
    assert(M = 2147483647); {2^31 - 1}
    assert(A = 16807);
    assert(R < Q);
    x := A * (x mod Q) - R * (x div Q);
    if x < 0 then
		x := x + M;
    generujLiczbePseudolosowa := x;
end;

function utworzPlansze(wiersze, kolumny : Integer; s1, s2 : String; x : Longint) : Planszeczka;
var s : String;
	i, j, l, kolumny1, wiersze1: Integer;
	A : Planszeczka;
begin
	s := s1 + s2;
	l := length(s);
	kolumny1 := kolumny;
	wiersze1 := wiersze;
	for i := 1 to kolumny1 do begin
		for j := wiersze1 downto 1 do begin
			generujLiczbePseudolosowa(x);
			A[j, i] := s[1 + x mod l]; 
		end;
	end;
	writeln; writeln;
	utworzPlansze := A;
end;

procedure wypiszPlansze(m, n : Integer; A : Planszeczka);
var m1, n1, i, j, pom, acc : Integer;
	char1, k : Char;
begin
	acc := ac;
	m1 := m;
	n1 := n;
	write('  +');
	for i := 1 to m do
		write('--');
	write('-+');
	writeln;
	for i := 1 to n1 do begin
		pom := n1 - i + 1;
		if pom < 10 then 
			write(pom, ' | ')
		else 
			write(pom - 10, ' | ');
		for j := 1 to m1 do begin
			k := A[i,j];
			write(k, ' ');
		end;
		write('| ');
		writeln;
	end;
	write('  +');
	for i := 1 to m do
		write('--');
	write('-+');
	writeln;
	write('    ');
	for i := 1 to m do begin
		char1 := char(acc);
		acc := acc + 1;
		write(char1, ' ');
	end;
	writeln;
end;

function ustalBloki(znaki : String) : ZnakiGracza;
var k, dlugosc : Integer;
	znagrapom : ZnakiGracza;
begin
	dlugosc := length(znaki);
	k := 1;
	znagrapom := [];
	while (k <= dlugosc) do begin
		if (not (znaki[k] in znagrapom)) then
			znagrapom := znagrapom + [znaki[k]];
		k := k + 1;
	end;
	ustalBloki := znagrapom;
end;		


function szukaj(i, j, k, w : Integer; element : Char; NaPlanszy : Planszeczka) : Planszeczka;
begin
		if NaPlanszy[i, j] = element then begin
			ile := ile + 1;
			writeln('ile wynosi ', ile);
			sciezka[ile, 1] := w - i + 1;
			sciezka[ile, 2] := j;
			writeln(char(96 + j), ' ', w - i + 1);
			NaPlanszy[i, j] := ' ';
			if i > 1 then NaPlanszy := szukaj(i - 1, j, k, w, element, NaPlanszy);
			if j > 1 then NaPlanszy := szukaj(i, j - 1, k, w, element, NaPlanszy);
			if i < w then NaPlanszy := szukaj(i + 1, j, k, w, element, NaPlanszy);
			if j < k then NaPlanszy := szukaj(i, j + 1, k, w, element, NaPlanszy);
		end;	
		szukaj := NaPlanszy;
	end;


procedure przeszukujTablice(k, w : Integer; Bloki : ZnakiGracza; NaPlanszy : Planszeczka);
var i, j, maksIle, nr : Integer;
	sciezkaMaks : Droga;
	element : Char;
	planszka : Planszeczka;
begin
	maksIle := 0;
	ile := 0;
	i := w;
	j := 1;
	nr := 0;
	while j < k do begin
		while i >= 1 do begin 
			for element in Bloki do begin
				nr := nr + 1;
				planszka := szukaj(i, j, k, w, element, NaPlanszy);
				writeln('poszukiwanie nr ', nr, ' ile wynosi ', ile);
				writeln('maksIle wynosi ', maksIle);
				if ile > maksIle then begin
					sciezkaMaks := sciezka;
					maksIle := ile;
					writeln('MAKS WYNOSI ', maksIle);
					wypiszPlansze(planszka);
				end;
			end;
			i := i - 1;
			ile := 0;
		end;
		i := w;
		j := j + 1;	
	end;		
	for i := 1 to maksIle do begin
		for j := 1 to 2 do 
			write(sciezkaMaks[i, char(96 + j)], ' ');
	end;
	writeln;
end;

var 
	k, w, g : Integer;
	xx : Longint;
	ss1, ss2 : String;
	Tablica : Planszeczka;
	czyGracz : Boolean;
	Bloki1, Bloki2 : ZnakiGracza;

begin
	readln(k, w, xx, g);
	readln(ss1);
	readln(ss2);
	Bloki1 := ustalBloki(ss1);
	Bloki2 := ustalBloki(ss2);
	czyGracz := g = 1;
	Tablica := utworzPlansze(w, k, ss1, ss2, xx);
	wypiszPlansze(k, w, Tablica);
	przeszukujTablice(k, w, Bloki1, Tablica);
end.


